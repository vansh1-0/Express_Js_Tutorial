expresss js its node js framework for creating admin panel and api.

m- model         Database related/data
v- view          Designing /html css
c- controller    bridge between model and view


create folder and open in vs code
create package.json file
create app.js file and add server code 

in cmd :npm i express
_________________________
Query String
________________________
?q=iphone 

url will be like:search?q=iphone

parameter
req.params.id:::to access
product/1


_________________________________
templete engine installation
_________________________________

npm i ejs         in terminal

app.set('views',__dirname+'/views')

_________________________________
Completed Steps and Next Steps
_________________________________

Steps Completed:
1. Set up basic Express.js application structure
2. Created HTML pages (home.html, about.html, contact.html)
3. Set up routes in app.js to serve these pages
4. Added static file middleware to serve CSS and images
5. Created a /views directory for EJS templates
6. Set up the Sum Calculator with EJS template
7. Improved CSS styling for better UI
8. Added navigation between all pages

Next Steps:
1. Create more dynamic content with EJS templates:
   - Create a new EJS template for a product list
   - Add dynamic data passing to templates

2. Add a database connection:
   - Install MongoDB or MySQL (npm install mongoose or npm install mysql2)
   - Create database models
   - Set up connection in app.js

3. Add user authentication:
   - Install packages: npm install passport passport-local express-session
   - Create login/register pages
   - Set up authentication middleware

4. Create a RESTful API:
   - Add JSON handling middleware (app.use(express.json()))
   - Create API routes (GET, POST, PUT, DELETE)
   - Test with tools like Postman

5. Add form handling with POST method:
   - Add body parser middleware (app.use(express.urlencoded({extended: true})))
   - Create forms that use POST instead of GET
   - Handle form data in routes

6. Error handling:
   - Add try/catch blocks
   - Create error middleware
   - Add 404 page

7. Add environment variables:
   - Install dotenv (npm install dotenv)
   - Create .env file for configuration
   - Use process.env.VARIABLE_NAME in code

8. Implement data validation:
   - Install validator package (npm install validator)
   - Validate user inputs
   - Return appropriate error messages

To run the application:
- Use command: node app.js
- Access in browser: http://localhost:3000